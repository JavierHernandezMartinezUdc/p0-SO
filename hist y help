
#include "historic.h"

void hist(tList *historial, char *trozos[]) {
    if (trozos[1] == NULL) {
        // Si no se proporciona ninguna opción, muestra todo el historial
        for (tPos i = first(*historial); i != CNULL; i = next(i, *historial)) {
            tItem comando = getItem(i, *historial);
            printf("%d: %s\n", comando.id, comando.nombre);
        }
    } else if (strcmp(trozos[1], "-c") == 0) {
        deleteList(historial);
    } else if (strcmp(trozos[1], "-N") == 0 && trozos[2] != NULL) {
        int N = atoi(trozos[2]);
        tPos n = findItem(N, *historial);
        for (tPos i = first(*historial); i != n; i = next(i, *historial)) {
            tItem comando = getItem(i, *historial);
            printf("%d: %s\n", comando.id, comando.nombre);
        }
    }
}

void help(char *trozos[]) {
  //Faltan las descripciones xd
    if (trozos[1] == NULL) {
        printf("authors [-l|-n]\n");
        printf("pid [-p]\n");
        printf("chdir [dir]\n");
        printf("date\n");
        printf("time\n");
        printf("hist [-c|-N]\n");
        printf("comand N\n");
        printf("open [file] mode\n");
        printf("close [df]\n");
        printf("dup [df]\n");
        printf("listopen\n");
        printf("infosys\n");
        printf("help [cmd]\n");
        printf("quit\n");
        printf("exit\n");
        printf("bye\n");
    } else {
        if (strcmp(trozos[1], "authors") == 0) {
            printf("authors: \n");
            printf("authors -l: \n");
            printf("authors -n: \n");
        } else if (strcmp(trozos[1], "pid") == 0) {
            printf("pid: \n");
            printf("pid -p: \n");
        } else if (strcmp(trozos[1], "chdir") == 0) {
            printf("chdir [dir]: \n");
        } else if (strcmp(trozos[1], "date") == 0) {
            printf("date: \n");
        } else if (strcmp(trozos[1], "time") == 0) {
            printf("time: \n");
        } else if (strcmp(trozos[1], "hist") == 0) {
            printf("hist: \n");
            printf("hist -c: \n");
            printf("hist -N: \n");
        } else if (strcmp(trozos[1], "comand") == 0) {
            printf("comand N: \n");
        } else if (strcmp(trozos[1], "open") == 0) {
            printf("open [file] mode: \n");
        } else if (strcmp(trozos[1], "close") == 0) {
            printf("close [df]: \n");
        } else if (strcmp(trozos[1], "dup") == 0) {
            printf("dup [df]: \n");
        } else if (strcmp(trozos[1], "listopen") == 0) {
            printf("listopen: \n");
        } else if (strcmp(trozos[1], "infosys") == 0) {
            printf("infosys: \n");
        } else if (strcmp(trozos[1], "help") == 0) {
            printf("help: \n");
            printf("help [cmd]: \n");
        } else if (strcmp(trozos[1], "quit") == 0) {
            printf("quit: \n");
        } else if (strcmp(trozos[1], "exit") == 0) {
            printf("exit: \n");
        } else if (strcmp(trozos[1], "bye") == 0) {
            printf("bye: \n");
        } else {
            printf("Comando no válido\n");
        }
    }
}
